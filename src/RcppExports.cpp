// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// soft_clustering
Rcpp::List soft_clustering(Rcpp::NumericVector fr, Rcpp::NumericMatrix Zr, Rcpp::NumericMatrix Sr, int nloops);
RcppExport SEXP _simdiversity_entropy_soft_clustering(SEXP frSEXP, SEXP ZrSEXP, SEXP SrSEXP, SEXP nloopsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type fr(frSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type Zr(ZrSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type Sr(SrSEXP);
    Rcpp::traits::input_parameter< int >::type nloops(nloopsSEXP);
    rcpp_result_gen = Rcpp::wrap(soft_clustering(fr, Zr, Sr, nloops));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_simdiversity_entropy_soft_clustering", (DL_FUNC) &_simdiversity_entropy_soft_clustering, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_simdiversity_entropy(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
